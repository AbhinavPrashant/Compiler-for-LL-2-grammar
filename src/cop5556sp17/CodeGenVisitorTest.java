
package cop5556sp17;

import static org.junit.Assert.*;

import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;

import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import cop5556sp17.AST.ASTNode;
import cop5556sp17.AST.Program;

public class CodeGenVisitorTest {

	static final boolean doPrint = true;

	static void show(Object s) {
		if (doPrint) {
			System.out.println(s);
		}
	}

	boolean devel = false;
	boolean grade = true;

	@Before
	public void initLog() {

		if (devel || grade)
			PLPRuntimeLog.initLog();

	}

	@After
	public void printLog() {

		System.out.println(PLPRuntimeLog.getString());

	}

	@Test
	public void emptyProg() throws Exception {
		// scan, parse, and type check the program
		String progname = "emptyProg";
		String input = progname + " integer a, boolean b {}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode
		String[] args = new String[] { "1", "true" }; // create command line
														// argument array to
														// initialize params,
														// none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}

	@Test
	public void testAssignmentProg() throws Exception {
		// scan, parse, and type check the program
		String progname = "AssignmentProg";
		String input = progname + " integer a, boolean b {\n" + "integer c\n" + "integer d\n" + "d <- 5;\n"
				+ "boolean e\n" + "e <-true;\n" + "a <- d;\n" + "e <- b;\n" + "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode
		String[] args = new String[] { "1", "true" }; // create command line
														// argument array to
														// initialize params,
														// none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}

	@Test
	public void testAssignmentProg2() throws Exception {
		// scan, parse, and type check the program
		String progname = "AssignmentProg2";
		String input = progname + " integer a, boolean b {\n" + "integer c\n" + "integer d\n" + "c <- 5;\n"
				+ "d <- 2 + 45*c;\n" + "b <- 7 != 6;" + "}";

		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode
		String[] args = new String[] { "1", "true" }; // create command line
														// argument array to
														// initialize params,
														// none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}

	@Test
	public void testIfStatement() throws Exception {
		// scan, parse, and type check the program
		String progname = "IfStatement";
		String input = progname + " integer a, boolean b {\n" + "integer c\n" + "integer d\n" + "c <- 2;\n"
				+ "d <- 5;\n" + "if (c != d) {\n" + "c <- 10;\n" + "}\n" + "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode
		String[] args = new String[] { "1", "true" }; // create command line
														// argument array to
														// initialize params,
														// none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}

	@Test
	public void testWhileStatement() throws Exception {
		// scan, parse, and type check the program
		String progname = "WhileStatement";
		String input = progname + " integer a, boolean b {\n" + "integer c\n" + "integer d\n" + "c <- 2;\n"
				+ "d <- 5;\n" + "integer count\n" + "count <- 0;" + "while (c <= d) {\n" + "count <- count + 1;\n"
				+ "c <- c + 1;" + "}\n" + "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode
		String[] args = new String[] { "1", "true" }; // create command line
														// argument array to
														// initialize params,
														// none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}

	@Test
	public void testBoolean() throws Exception {
		// scan, parse, and type check the program
		String progname = "BooleanStatement";
		String input = progname + " integer a, boolean b {\n" + "boolean c\n" + "integer d\n" + "d <-2;"
				+ "c <- d < 5 >= true;\n" + "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode
		String[] args = new String[] { "1", "true" }; // create command line
														// argument array to
														// initialize params,
														// none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}

	// Failed test cases

	@Test
	public void testProgram() throws Exception {
		// scan, parse, and type check the program
		String input = "compProg0 { integer a0 \n" + "a0<-0;\n" + "if(a0 == 0){\n"
				+ "integer a00 integer b00 integer c00 integer d00 integer e00\n"
				+ "e00 <- 5; d00 <- 4; c00 <- 3; b00 <- 2; a00 <- 1;\n" + "if(a00 == 1){\n"
				+ "integer a01 integer b01 integer c01 integer d01 integer e01 \n"
				+ "e01 <- 55; d01 <- 44; c01 <- 33; b01 <- 22; a01 <- 11;\n" + "}\n" + "}\n" + "} ";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode
		String[] args = new String[] { "1", "true" }; // create command line
														// argument array to
														// initialize params,
														// none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}

	@Test
	public void testProgram2() throws Exception {
		// scan, parse, and type check the program
		String input = "compProg2 integer x, integer y, integer z, boolean bool_1, boolean bool_2 { \n" + "x <- 100; \n"
				+ "y <- x / 3 * 2; \n" + "z <- y; \n" + "bool_1 <- false; \n" + "bool_2 <- true; \n" + "integer y \n"
				+ "y <- z + 20; \n" + "z <- y; \n" + "if(bool_2){ \n" + "boolean bool_1 \n" + "bool_1 <- bool_2; \n"
				+ "} \n" + "if(bool_1) { \n" + "integer err \n" + "err <- 2333; \n" + "} \n" + "integer pass_token \n"
				+ "pass_token <- 0; \n" + "while(pass_token != 4) { \n" + "integer local_1 \n" + "integer local_2 \n"
				+ "local_1 <- 45; \n" + "local_2 <- 46; \n"
				+ "if(local_1 != local_2) {pass_token <- pass_token + 1;} \n"
				+ "if(local_1 == local_2) {pass_token <- pass_token + 1;} \n"
				+ "if(local_1 > local_2) {pass_token <- pass_token + 1;} \n"
				+ "if(local_1 >= 45) {pass_token <- pass_token + 1;} \n"
				+ "if(local_1 < local_2) {pass_token <- pass_token + 1;} \n"
				+ "if(46 <= local_2) {pass_token <- pass_token + 1;} \n"
				+ "if((local_1 > local_2)) {pass_token <- pass_token + 1;} \n" + "} \n" + "} ";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode
		String[] args = new String[] { "0", "0", "0", "true", "false" }; // create
																			// command
																			// line
																			// argument
																			// array
																			// to
																			// initialize
																			// params,
																			// none
																			// in
																			// this
																			// case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}

	@Test
	public void testProgram3() throws Exception {
		// scan, parse, and type check the program
		String input = "booleanComp1 { \n" + "boolean a  \n" + "a<- true == false;\n" + "a <- 4< 5;\n" + "a<- 4<=5;\n"
				+ "a<- 4 == 5;\n" + "a<- 5 == 5;\n" + "a<- 5 >= 4;\n" + "a<- 5>=5;\n" + "a<- 6> 5;\n" + "a<- 4 != 5;\n"
				+ "a<- 4 < 5;\n" + "a<- 4 <= 4;\n" + "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode
		String[] args = new String[] { "1", "true" }; // create command line
														// argument array to
														// initialize params,
														// none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}

	@Test
	public void testProgram4() throws Exception {
		// scan, parse, and type check the program
		String input = "booleanComp2 { \n" + "boolean a boolean b boolean c \n" + "a<-true;\n"// true
				+ "b<-false; \n" // false
				+ "c<-a<b;\n" // false
				+ "c<-a<=b;\n" // false
				+ "c<-a>b;\n" // true
				+ "c<-a>=b;\n" // true
				+ "c<-a==b;\n" // false
				+ "c<-a!=b;\n" // true
				+ "a<-false; \n" // false
				+ "b<-true;\n" // true
				+ "c<-a<b;\n" // true
				+ "c<-a<=b;\n" // true
				+ "c<-a>b;\n" // false
				+ "c<-a>=b;\n" // false
				+ "c<-a==b;\n" // false
				+ "c<-a!=b;\n" // true
				+ "a<-true; \n" // true
				+ "b<-true;\n" // true
				+ "c<-a<b;\n" // false
				+ "c<-a<=b;\n" // true
				+ "c<-a>b;\n" // false
				+ "c<-a>=b;\n" // true
				+ "c<-a==b;\n" // true
				+ "c<-a!=b;\n" // false
				+ "a<-false;\n" // false
				+ "b<-false;\n" // false
				+ "c<-a<b;\n" // false
				+ "c<-a<=b;\n" // true
				+ "c<-a>b;\n" // false
				+ "c<-a>=b;\n" // true
				+ "c<-a==b;\n" // true
				+ "c<-a!=b;\n" // false
				+ "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode
		String[] args = new String[] { "1", "true" }; // create command line
														// argument array to
														// initialize params,
														// none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}

	@Test
	public void testProgram5() throws Exception {
		// scan, parse, and type check the program
		String input = "ifStatement1{\n" + "integer i \n" + "integer j \n" + "i <-56; \n" + "if (i == 55) {j <- 3;} \n"
				+ "if (i != 55){ j <- 1;}\n" + "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode
		String[] args = new String[] { "1", "true" }; // create command line
														// argument array to
														// initialize params,
														// none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}

	@Test
	public void testProgram6() throws Exception {
		// scan, parse, and type check the program
		String input = "ifStatement4 {integer local_int0\n" + "integer local_int1\n" + "local_int0 <- 42;\n"
				+ "local_int1 <- 43;\n" + "if(local_int0 == local_int1){\n" + "integer local_int11 \n"
				+ "local_int11 <- 44;\n" + "}\n" + "if(local_int0 != local_int1){\n" + "integer local_int22 \n"
				+ "local_int22 <- 45;\n" + "}\n" + "if(local_int0 != local_int1){\n" + "integer local_int33 \n"
				+ "local_int33 <- 46;\n" + "integer local_int44 \n" + "local_int44 <- 47;\n" + "}\n" + "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode
		String[] args = new String[] { "1", "true" }; // create command line
														// argument array to
														// initialize params,
														// none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}

	/******************** Tests for assignment 6 *******************/

	@Test
	public void testParamDec() throws Exception {
		// scan, parse, and type check the program
		String input = " progParam integer a, file f, url u, boolean b {}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode
		String[] args = new String[] { "1", "image1.png", "http://127.0.0.1/image2.png", "true" };
		// initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}

	@Test
	public void testScreenWandH() throws Exception {
		// scan, parse, and type check the program
		String input = " progScreenWandH { integer a integer b\n" + "a <- screenwidth;\n" + "b <-screenheight;\n" + "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode
		String[] args = new String[] {};
		// initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();

		String str = PLPRuntimeLog.getString();
		assertEquals(str, "getScreenWidth1366getScreenHeight768");
	}

	@Test
	public void testSleep() throws Exception {
		// scan, parse, and type check the program
		String input = " progSleep { integer a integer b\n" + "sleep (1000);\n" + "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode
		String[] args = new String[] {};
		// initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();

		// String str = PLPRuntimeLog.getString();
		// assertEquals (str, "getScreenWidth1366getScreenHeight768");
	}

	@Test
	public void testAndOr() throws Exception {
		// scan, parse, and type check the program
		String input = " progAndOr { integer a boolean b\n" + "a <- 7 % 2;\n"
				+ "b <- false | false | true;\n" + "b <- true & false;\n" + "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode
		String[] args = new String[] {};
		// initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		String str = PLPRuntimeLog.getString();
		assertEquals(str, "1truefalse");
	}

	@Test
	public void testImage() throws Exception {
		// scan, parse, and type check the program
		String input = " progImage file f1, file f2 {\n" + "image i\n" + "f1->i; i ->scale(2)-> gray ->f2;" + "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode
		String[] args = new String[] {
		"image1.png", "testFile.jpg"};
		// initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
		/*
		 * String str = PLPRuntimeLog.getString(); assertEquals (str,
		 * "2131truefalse");
		 */
	}
	
	@Test
	public void testFrameOP() throws Exception {
		// scan, parse, and type check the program
		String input = " progFrameOp file f, file f2{\n" + "image i frame fr \n" + "f->i; i->fr->show; sleep 2000;"
				//+ " fr->show;" 
				+ "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode	
		String[] args = new String[] {"image1.png","image2s.png"};
		// initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
//		Thread.sleep(2000);
		instance.run();
		/*
		 * String str = PLPRuntimeLog.getString(); assertEquals (str,
		 * "2131truefalse");
		 */
	}
	
	@Test
	public void testImage2() throws Exception {
		// scan, parse, and type check the program
		String input = " progImage2 file f, file f2{\n" + "image i  image i2\n" + "f->i;\n i2<-i*2 +i; i <- i2-i; i->f2;"
				//+ " fr->show;" 
				+ "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode	
		String[] args = new String[] {"image1.png","abc.png"};
		// initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
//		Thread.sleep(2000);
		instance.run();
		/*
		 * String str = PLPRuntimeLog.getString(); assertEquals (str,
		 * "2131truefalse");
		 */
	}
	
	@Test
	public void testImageAndFrameAssn() throws Exception {
		// scan, parse, and type check the program
		String input = "assignImageAndFrame url u {image i image i1 frame f frame f1\nu -> i -> f; frame f2  \ni -> scale (3) -> f2; sleep (3000);\n i1 <- i; \n f2 <- f; f2->show;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		
		String[] args = new String[] {"http://127.0.0.1/image2.png"};
		// initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
//		Thread.sleep(2000);
		instance.run();
		/*
		 * String str = PLPRuntimeLog.getString(); assertEquals (str,
		 * "2131truefalse");
		 */
	}
	
	@Test
	public void testBarArrow() throws Exception {
		// scan, parse, and type check the program
		String input = "BarArrow url u {image i frame fr u->i|->gray;\n"
				+ "i->fr->show;"
				+ "sleep 2000;\n"
				+ "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode	
		String[] args = new String[] {"http://127.0.0.1/image3.png"};
		// initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
//		Thread.sleep(2000);
		instance.run();
		
		String str = PLPRuntimeLog.getString();
		assertEquals ("getURL(http://127.0.0.1/image3.png)"
				+ "readFromURL(http://127.0.0.1/image3.png)"+"grayOp"
				+ "createOrSetFrame"+ "showImage",str);
		 
	}
	
	@Test
	public void testAssignment() throws Exception {
		// scan, parse, and type check the program
		String input = "progAssignment url u1 {image i1 image i2 frame fr1 frame fr2  u1->i1 ->fr1; i2<-i1; fr2<-fr1;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode
		String[] args = new String[] {"http://127.0.0.1/image2.png", "http://127.0.0.1/image3.png", "image1.png", "image2.png"};
		// initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
//		Thread.sleep(2000);
		instance.run();
		
		String str = PLPRuntimeLog.getString();
		assertEquals ("getURL(http://127.0.0.1/image2.png)"+ "readFromURL(http://127.0.0.1/image2.png)"
		+"createOrSetFrame" + "copyImage",str);
		 
	}
	
	
	@Test
	public void testFrameOp() throws Exception {
		// scan, parse, and type check the program
		String input = "progFrameOp2 url u, file f {image i1 image i2 frame f2 u->i1->f;f->i2->f2->show; f2->move(10,10);sleep 2000;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode
		String[] args = new String[] {"http://127.0.0.1/image2.png", "abc.png"};
		// initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
//		Thread.sleep(2000);
		instance.run();
		
		String str = PLPRuntimeLog.getString();
		assertEquals ("getURL(http://127.0.0.1/image2.png)readFromURL(http://127.0.0.1/image2.png)"
				+ "write(abc.png)" + "readFromFile(abc.png)"+ "createOrSetFrame"
				+ "showImage" + "moveFrame", str);
		 
	}
	
	
	@Test
	public void testImageOp() throws Exception {
		// scan, parse, and type check the program
		String input = "testImageOp2 file f1, file f2{image i1 image i2 image i3 frame f f1->i1; f2->i2; "
				+ "i3<- i1+i2; i3->f->move(10,200)->show; sleep 500;\n"
				+ "i3<- i1-i2; i3->scale(2)->f->move(200,200)->show; sleep 500;\n"
				+ "i3<- 2*i2; i3->scale(2)->f->move(300,200)->show; sleep 500;\n"
				+ "i3<- i1/2; i3->f->move(400,200)->show; sleep 500;\n"
				+ "i3<- i1%2; i3->scale(2)->f->move(500,200)->show; sleep 500;\n"
				+ "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode
		String[] args = new String[] {"image1.png", "image2.png"};
		// initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
//		Thread.sleep(2000);
		instance.run();
		
		String str = PLPRuntimeLog.getString();
		assertEquals ("readFromFile(image1.png)" + "readFromFile(image2.png)" +
		"add"+"copyImage"+"createOrSetFrame" + "moveFrame" + "showImage"+
		"sub"+"copyImage"+ "scale"+"createOrSetFrame" + "showImage"+ "moveFrame" + "showImage"+
		"mul"+"copyImage"+"scale"+"createOrSetFrame" + "showImage"+ "moveFrame" + "showImage"+
		"div"+"copyImage"+"createOrSetFrame" + "showImage"+ "moveFrame" + "showImage"+
		"mod"+"copyImage"+"scale"+"createOrSetFrame" + "showImage"+ "moveFrame" + "showImage" , str);
		 
	}
	
	@Test
	public void testFrameOp2() throws Exception {
		// scan, parse, and type check the program
		String input = "testFrameOp3 url u, integer x, integer y{image i frame f\n"
				+ "u->i->f->move(10,10)->show;\n"
				+ "sleep 500;\n"
				+ "f->hide;\n"
				+ "sleep 500;\n"
				+ "f->xloc->x;\n"
				+ "x<-x;\n"
				+ "f->yloc->y;\n"
				+ "y<-y;\n"
				+ "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode		
		String[] args = new String[] {"http://127.0.0.1/image1.png", "0" ,"0"};
		// initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
//		Thread.sleep(2000);
		instance.run();
		
		  String str = PLPRuntimeLog.getString();
		  assertEquals ("getURL(http://127.0.0.1/image1.png)"
		 + "readFromURL(http://127.0.0.1/image1.png)"
		 + "createOrSetFrame"
		 + "moveFrame"
		 + "showImage"
		 + "hideImage"
		 + "getX43"
		 + "getY52", str);	 
	}
	
	@Test
	public void testFilterOp() throws Exception {
		// scan, parse, and type check the program
		String input = "progFilterOp url u {image i frame f\n"
				+ "u->i->f->move(10,10)->show;\n"
				+ "i->blur->f->show;"
				+ "sleep 200;"
				+ "i->gray->f->show;"
				+ "sleep 200;"
				+ "i->convolve->f->show;"
				+ "sleep 200;"
				+ "i |-> gray;"
				+ "i -> f->show;"
				+ "sleep 200;"
				+ "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode		
		String[] args = new String[] {"http://127.0.0.1/image3.png"};
		// initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
//		Thread.sleep(2000);
		instance.run();
		
		String str = PLPRuntimeLog.getString();
		assertEquals ("getURL(http://127.0.0.1/image3.png)"
		 + "readFromURL(http://127.0.0.1/image3.png)"
		 + "createOrSetFrame"
		 + "moveFrame"
		 + "showImage"
		 + "blurOpcreateOrSetFrameshowImageshowImage"
		 + "grayOpcreateOrSetFrameshowImageshowImage"
		 + "convolvecreateOrSetFrameshowImageshowImage"
		 + "grayOpcreateOrSetFrameshowImageshowImage", str); 	 
	}
		
	@Test
	public void testFileWrite() throws Exception {
		// scan, parse, and type check the program
		String input = "FileWrite url u, file f {image i u->i->f;\n"
				+ "}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);

		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);

		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);

		// directly execute bytecode
		String[] args = new String[] {"http://127.0.0.1/image1.png", "testfile.png"};
		// initialize params, none in this case
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
//		Thread.sleep(2000);
		instance.run();
		
		String str = PLPRuntimeLog.getString();
		assertEquals ("getURL(http://127.0.0.1/image1.png)"
		 + "readFromURL(http://127.0.0.1/image1.png)"
		 + "write(testfile.png)",str); 	 
	}
}
